- name: "Ensure admin group exists - {{ item }}"
  group: name="admin" gid=99 state=present

- block:
  - name: "Add user - {{ item }}"
    user:
      name={{ item }}
      state={{ user.state }}
      uid={{ user.uid }}
      home="/home/{{ item }}"
      comment="{{ user.company }} - {{ user.email }}"
      shell={{ user.shell|default(user_shell) }}
      groups={{ user.groups|join( "," ) }}
      append=yes

  - name: "Force permissions on home directory - {{ item }}"
    file:
      path="/home/{{ item }}"
      state=directory
      owner={{ item }}
      group={{ item }}
      mode=700

  - name: "Add .ssh directory - {{ item }}"
    file:
      path="/home/{{ item }}/.ssh"
      state=directory
      owner={{ item }}
      group={{ item }}
      mode=700

  - name: "Add hardcoded ssh keys - {{ item }}"
    copy:
      dest=/home/{{ item }}/.ssh/authorized_keys
      content="# Generated by Ansible\n{{ user.sshkeys|join('\n') }}"
      owner={{ item }}
      group={{ item }}
      mode=0600
    when: user.sshkeys is defined

  - name: "Find sshkey file to provision - {{ item }}"
    become: false
    local_action: stat path={{ inventory_dir }}/roles/users/files/keys/{{ item }}/{{ item }}.sshkeys
    register: keyfile
    when: user.sshkeys is not defined

  - name: "Find per org sshkey file to provision - {{ item }}"
    become: false
    local_action: stat path={{ inventory_dir }}/roles/users/files/keys/{{ item }}/{{ item }}-only.sshkeys
    register: keyfile2
    when: user.sshkeys is not defined

  - name: "Add ssh keys from file - {{ item }}"
    copy:
      src={{ inventory_dir }}/roles/users/files/keys/{{ item }}/{{ item }}.sshkeys
      dest=/home/{{ item }}/.ssh/authorized_keys
      owner={{ item }}
      group={{ item }}
      mode=0600
    when: user.sshkeys is not defined and keyfile.stat.exists == True and item != OWNER

  - name: "Add ssh keys + local org ssh keys from file - {{ item }}"
    assemble:
      src={{ inventory_dir }}/roles/users/files/keys/{{ item }}
      dest=/home/{{ item }}/.ssh/authorized_keys
      owner={{ item }}
      group={{ item }}
      mode=0600
    when: user.sshkeys is not defined and (keyfile.stat.exists == True or keyfile2.stat.exists == True) and item == OWNER

  - name: "Add owner to admin group - {{ item }}"
    user: name={{ item }} group={{ item }} groups=admin append=yes
    when: item == OWNER
  when: user.state == "present"

- block:
  - name: "Remove sshkeys of inactive user - {{ item }}"
    file:
      path="/home/{{ item }}/.ssh/authorized_keys"
      state=absent
  - name: "Clean up cron jobs - {{ item }}"
    file:
      path=/var/spool/cron/crontabs/{{ item }}
      state=absent
  when: user.state == "absent"

